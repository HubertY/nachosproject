STRATEGY OVERVIEW:
We keep a PriorityQueue of threads that need waking up sorted in order of when they should be woken up. The function waitUntil adds the current thread keyed by wakeTime to the queue and puts the thread to sleep. Whenever a timer interrupt goes off, threads are popped from the head of the queue until the queue is empty or the wakeup time for the thread has not yet been reached. These threads are set to a ready state and placed in the scheduler's ready queue.

EFFICIENCY:
A PriorityQueue has O(log n) insert and access. Thus the overhead for adding a thread to the wait queue and for waking up threads scales logarithmically with the number of threads currently waiting.

PROOF OF CORRECTNESS:
The PriorityQueue class ensures that its contents are kept in sorted order. Thus, if a thread is found in the queue that it isn't yet time to wake up, the threads further in the queue are guaranteed to have wakeTimes further in the future and thus are known to not yet require waking. Thus all threads that need waking are woken up every timer interrupt.

TEST CASES:
Test cases are enumerated for waiting each multiple of 100 ticks from [100,4900]. The difference between the actual time waited and the expected time waited is measured.